name: Deploy to Amazon ECS

run-name: Deploy to ECS triggered by @${{ github.actor }}


env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  ECS_TASK_EXECUTION_ROLE: ${{ vars.ECS_TASK_EXECUTION_ROLE}}


on:
  push:
    branches:
      - master
    tags:
      - 'release/*'


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Decide Environment
        id: trigger-env
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]];  then
            echo "TAG=${{ github.sha }}" >> "$GITHUB_OUTPUT"
            echo "AWS_ACCOUNT_ID=${{ secrets.DEV_AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          else
            TAG=${{ github.ref }}
            echo "TAG=${TAG##*/}" >> "$GITHUB_OUTPUT"
            echo "AWS_ACCOUNT_ID=${{ secrets.PRD_AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Send Notification and start deploy
        env:
          TAG: ${{ steps.trigger-env.outputs.TAG }}
        shell: bash
        timeout-minutes: 1
        run: |
          curl --request POST --url "${{ secrets.CHAT_WEBHOOK }}" --header "content-type: application/json" --data '{"text": "🚀  `${{ github.triggering_actor }}` 推送: `${{ env.TAG }}` 到 `${{ github.repository }}`, 開始觸發CDPipeline", "thread": {"threadKey": "${{ github.sha }}"}}'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCOUNT_ID: ${{ steps.trigger-env.outputs.AWS_ACCOUNT_ID }}
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ECS_TASK_EXECUTION_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
        timeout-minutes: 1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        timeout-minutes: 1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.trigger-env.outputs.TAG }}
          DEMO_SECRET: ${{ env.DEMO_SECRET }}
        run: |
          docker build --build-arg DEMO_SECRET=$DEMO_SECRET -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        shell: bash
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


  finally:
    name: Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Send Notification after deploy
        timeout-minutes: 1
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]];  then
            echo "RESULT=✅ Successful" >> "$GITHUB_ENV"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]];  then
            echo "RESULT=❌ Failure" >> "$GITHUB_ENV"
          elif [[ "${{ needs.deploy.result }}" == "cancelled" ]];  then
            echo "RESULT=❗️ Stopped" >> "$GITHUB_ENV"
          else
            echo "執行結果出現例外狀況(聯繫 DevOps 協助排查): ${{ needs.deploy.result }}"
            exit 1
          fi
          echo "-------"
          # echo "$RESULT"
          # echo env.RESULT
          # echo $env.RESULT
          # echo ${{ env.RESULT }}}
          # echo ${{ RESULT }}
          echo "-------"
          
          curl --request POST --url "${{ secrets.CHAT_WEBHOOK }}" --header "content-type: application/json" --data "{\"text\": \"執行結果: $RESULT\",\"thread\": {\"threadKey\": \"${{ github.sha }}\"}}"
