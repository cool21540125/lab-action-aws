name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
    

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME}}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID}}
  AWS_DEPLOY_ROLE: ${{ vars.AWS_DEPLOY_ROLE}}
  CHAT_WEBHOOK: ${{ vars.CHAT_WEBHOOK}}
  DEMO_SECRET: ${{ secrets.DEMO_SECRET }}


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    # environment: production

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_DEPLOY_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
        timeout-minutes: 1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        timeout-minutes: 1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          DEMO_SECRET: ${{ env.DEMO_SECRET }}
        run: |
          docker build --build-arg DEMO_SECRET=$DEMO_SECRET -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        id: task-deff
        run: |
          aws ecs describe-task-definition --task-definition taskDef2311 --query taskDefinition > task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        id: ecs-deploy
        with:
          task-definition: task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  notify:
    name: Send Notification before deploy
    runs-on: ubuntu-latest

    steps:
      - name: Send Notification when begin
        timeout-minutes: 1
        run: |
          curl -X POST --url ${{ env.CHAT_WEBHOOK }} --header "content-type: application/json" --data '{"text": "START","thread": {"threadKey": "${{ github.sha }}"}}'

  notify2:
    name: Send Notification after deploy
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Notification after deploy
        timeout-minutes: 1
        run: |
          curl -X POST --url ${{ env.CHAT_WEBHOOK }} --header "content-type: application/json" --data '{"text": "DONE","thread": {"threadKey": "${{ github.sha }}"}}'
