name: Deploy to Amazon ECS

run-name: Deploy to ECS triggered by @${{ github.actor }}


env:
  ECS_EXECUTION_ROLE: ${{ vars.ECS_EXECUTION_ROLE}}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  CHAT_WEBHOOK: ${{ secrets.CHAT_WEBHOOK}}
  DEMO_SECRET: ${{ secrets.DEMO_SECRET }}


on:
  push:
    branches:
      - main
      - master
    tags:
      - 'release/*'
      - '*'


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: testing
        run: |
          #!/bin/env bash
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]];  then
            echo "TAG=${{ github.sha }}" >> "$GITHUB_ENV"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          else
            TAG=${{ github.ref }}
            echo "TAG=${TAG##*/}" >> "$GITHUB_ENV"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.PRD_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
            # echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          fi
          echo $TAG

      - name: testing2
        run: |
          #!/bin/env bash
          echo "--------------------"
          echo ${{ env.AWS_ACCESS_KEY_ID }}
          echo ${{ env.AWS_SECRET_ACCESS_KEY }}
          echo ${{ env.TAG }}
          echo "--------------------"
          aws --version
          aws sts get-caller-identity
          echo "===================="

      # - name: Send Notification and start deploy
      #   timeout-minutes: 1
      #   run: |
      #     curl --request POST --url "${{ env.CHAT_WEBHOOK }}" --header "content-type: application/json" --data '{"text": "作者: `${{ github.triggering_actor }}` 推送 Commit: `${{ github.ref }}` 到 `${{ github.repository }}`, 開始觸發 CD Pipeline","thread": {"threadKey": "${{ github.ref }}"}}'

      # - name: Checkout
      #   uses: actions/checkout@v4

      ### Assume Role for OIDC Usage
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::${{ env.AWS_ACCESS_KEY_ID }}:role/${{ env.ECS_EXECUTION_ROLE }}
      #     aws-region: ${{ env.AWS_REGION }}
      #   timeout-minutes: 1

      ### Assume Role for Cross Account Usage
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        timeout-minutes: 1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        timeout-minutes: 1

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.ref }}
      #     DEMO_SECRET: ${{ env.DEMO_SECRET }}
      #   run: |
      #     docker build --build-arg DEMO_SECRET=$DEMO_SECRET -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Download task definition
      #   id: task-deff
      #   run: |
      #     aws ecs describe-task-definition --task-definition taskDefLineBotFlask --query taskDefinition > task-definition.json

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   id: ecs-deploy
      #   with:
      #     task-definition: task-definition.json
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true


  # finally:
  #   name: Notification
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: deploy
  #   steps:
  #     - name: Send Notification after deploy
  #       timeout-minutes: 1
  #       run: |
  #         curl --request POST --url "${{ env.CHAT_WEBHOOK }}" --header "content-type: application/json" --data '{"text": "執行結果: ${{ needs.deploy.result }}","thread": {"threadKey": "${{ github.ref }}"}}'
